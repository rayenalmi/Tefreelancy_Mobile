package com.tefreelancy.myapp;

import com.codename1.components.ImageViewer;
import com.codename1.components.SpanLabel;
import com.codename1.io.ConnectionRequest;
import com.codename1.io.JSONParser;
import static com.codename1.ui.CN.*;
import com.codename1.ui.Display;
import com.codename1.ui.Form;
import com.codename1.ui.Dialog;
import com.codename1.ui.Label;
import com.codename1.ui.plaf.UIManager;
import com.codename1.ui.util.Resources;
import com.codename1.io.Log;
import com.codename1.ui.Toolbar;
import java.io.IOException;
import com.codename1.ui.layouts.BoxLayout;
import com.codename1.io.NetworkEvent;
import com.codename1.io.NetworkManager;
import com.codename1.ui.Button;
import com.codename1.ui.Container;
import com.codename1.ui.Image;
import com.codename1.ui.TextField;
import com.codename1.ui.events.ActionEvent;
import com.codename1.ui.events.ActionListener;
import com.codename1.ui.layouts.FlowLayout;
import com.codename1.ui.util.UIBuilder;
import com.tefreelancy.utils.SessionManager;
import com.terfreelancy.enties.Freelancer;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Map;

/**
 * This file was generated by <a href="https://www.codenameone.com/">Codename
 * One</a> for the purpose of building native mobile applications using Java.
 */
public class MyApplication {

    private Form current;
    private Resources theme;

    public void init(Object context) {
        // use two network threads instead of one
        updateNetworkThreadCount(2);

        theme = UIManager.initFirstTheme("/theme");

        // Enable Toolbar on all Forms by default
        Toolbar.setGlobalToolbar(true);

        // Pro only feature
        Log.bindCrashProtection(true);

        addNetworkErrorListener(err -> {
            // prevent the event from propagating
            err.consume();
            if (err.getError() != null) {
                Log.e(err.getError());
            }
            Log.sendLogAsync();
            Dialog.show("Connection Error", "There was a networking error in the connection to " + err.getConnectionRequest().getUrl(), "OK", null);
        });
    }

    public void start() {
        if (current != null) {
            current.show();
            return;
        }
        UIBuilder.registerCustomComponent("ImageViewer", ImageViewer.class);
        UIBuilder uIBuilder = new UIBuilder();
        Container c = uIBuilder.createContainer(theme, "Login");
        Container c1 = uIBuilder.createContainer(theme, "Signup");
        Container c2 = uIBuilder.createContainer(theme, "AdminUser");

        Form AdminUser = (Form) c2;

        Form fsignup = (Form) c1;
        //data from 

        // get button signuo from sign up form 
        Button signupbtnform = (Button) uIBuilder.findByName("signup", c1);
        signupbtnform.addActionListener(er -> {
            TextField fname = (TextField) uIBuilder.findByName("fname", c1);
            TextField lname = (TextField) uIBuilder.findByName("lname", c1);
            TextField newemail = (TextField) uIBuilder.findByName("email", c1);
            TextField newpassword = (TextField) uIBuilder.findByName("password", c1);
            TextField phone = (TextField) uIBuilder.findByName("phone", c1);

            String requestBody = "{\"email\": \"" + newemail.getText() + "\" , \"password\": \"" + newpassword.getText() + "\" , \"fname\": \"" + fname.getText() + "\" , \"lname\": \"" + lname.getText() + "\" , \"phone\": \"" + phone.getText() + "\"}"; // replace with your login credentials as JSON
            System.out.println(requestBody);

            String url = "http://127.0.0.1:8000/user/signupfreelancermobile";

            ConnectionRequest request = new ConnectionRequest() {
                @Override
                protected void readResponse(InputStream input) throws IOException {
                    JSONParser parser = new JSONParser();
                    Map<String, Object> response = parser.parseJSON(new InputStreamReader(input));
                    System.out.println("Response: " + response);
                    Object successValue = response.get("success");
                    System.out.println("Success value: " + successValue);

                }

                @Override
                protected void handleErrorResponseCode(int code, String message) {
                    System.out.println("Error: " + message);
                }
            };
            request.setUrl(url);
            request.setPost(true);
            request.setRequestBody(requestBody);
            request.setContentType("application/json");
            NetworkManager.getInstance().addToQueue(request);

        });

        //Form f = (Form) uIBuilder.findByName("Login", c);
        Form f1 = (Form) c;

        AdminUser.getToolbar().addCommandToLeftBar("Back", null, (ActionListener) (ActionEvent evt) -> {
            f1.showBack();
        });
        TextField email = (TextField) uIBuilder.findByName("email", c);

        TextField password = (TextField) uIBuilder.findByName("password", c);
        Button loginbtn = (Button) uIBuilder.findByName("login", c);
        Button signupbtn = (Button) uIBuilder.findByName("signup", c);

        Form f2 = new Form("Home", new FlowLayout(CENTER, CENTER));

        Form f3 = new Form("Offers", new FlowLayout(CENTER, CENTER));
        Form f33 = new Form("Candidacy", new FlowLayout(CENTER, CENTER));
        Form f4 = new Form("Foramtion", new FlowLayout(CENTER, CENTER));
        Form f5 = new Form("Favoris", new FlowLayout(CENTER, CENTER));
        Form f6 = new Form("Badges", new FlowLayout(CENTER, CENTER));
        Form f8 = new Form("Groups", new FlowLayout(CENTER, CENTER));
        Form f10 = new Form("Workspace", new FlowLayout(CENTER, CENTER));
        Form f11 = new Form("Profil", new FlowLayout(CENTER, CENTER));

        Label lb = new Label("nom : ");
        f2.add(lb);

        SpanLabel sp = new SpanLabel("Enseignante en informatique et membre de l'UP JAVA");
        f3.add(sp);
        // navbar Form 2
        f2.getToolbar().addCommandToLeftSideMenu("Home", null, ev -> f2.show());
        f2.getToolbar().addCommandToLeftSideMenu("Offers", null, ev -> f3.show());
        f2.getToolbar().addCommandToLeftSideMenu("Candidacy", null, ev -> f33.show());
        f2.getToolbar().addCommandToLeftSideMenu("Foramtion", null, ev -> f4.show());
        f2.getToolbar().addCommandToLeftSideMenu("Favoris", null, ev -> f5.show());
        f2.getToolbar().addCommandToLeftSideMenu("Badges", null, ev -> f6.show());
        f2.getToolbar().addCommandToLeftSideMenu("Groups", null, ev -> f8.show());
        f2.getToolbar().addCommandToLeftSideMenu("Workspace", null, ev -> f10.show());
        f2.getToolbar().addCommandToLeftSideMenu("Profil", null, ev -> f11.show());
        f2.getToolbar().addCommandToLeftSideMenu("Logout", null, ev -> f1.show());

        // navvbbar Form 3
        f3.getToolbar().addCommandToLeftSideMenu("Home", null, ev -> f2.show());
        f3.getToolbar().addCommandToLeftSideMenu("Offers", null, ev -> f3.show());
        f3.getToolbar().addCommandToLeftSideMenu("Candidacy", null, ev -> f33.show());
        f3.getToolbar().addCommandToLeftSideMenu("Foramtion", null, ev -> f4.show());
        f3.getToolbar().addCommandToLeftSideMenu("Favoris", null, ev -> f5.show());
        f3.getToolbar().addCommandToLeftSideMenu("Badges", null, ev -> f6.show());
        f3.getToolbar().addCommandToLeftSideMenu("Groups", null, ev -> f8.show());
        f3.getToolbar().addCommandToLeftSideMenu("Workspace", null, ev -> f10.show());
        f3.getToolbar().addCommandToLeftSideMenu("Profil", null, ev -> f11.show());
        f3.getToolbar().addCommandToLeftSideMenu("Logout", null, ev -> f1.show());

        // NAVIGATION NAVBAR FROM 33
        f33.getToolbar().addCommandToLeftSideMenu("Home", null, ev -> f2.show());
        f33.getToolbar().addCommandToLeftSideMenu("Offers", null, ev -> f3.show());
        f33.getToolbar().addCommandToLeftSideMenu("Candidacy", null, ev -> f33.show());
        f33.getToolbar().addCommandToLeftSideMenu("Foramtion", null, ev -> f4.show());
        f33.getToolbar().addCommandToLeftSideMenu("Favoris", null, ev -> f5.show());
        f33.getToolbar().addCommandToLeftSideMenu("Badges", null, ev -> f6.show());
        f33.getToolbar().addCommandToLeftSideMenu("Groups", null, ev -> f8.show());
        f33.getToolbar().addCommandToLeftSideMenu("Workspace", null, ev -> f10.show());
        f33.getToolbar().addCommandToLeftSideMenu("Profil", null, ev -> f11.show());
        f33.getToolbar().addCommandToLeftSideMenu("Logout", null, ev -> f1.show());

        // Navigation navbar Form 4 
        f4.getToolbar().addCommandToLeftSideMenu("Home", null, ev -> f2.show());
        f4.getToolbar().addCommandToLeftSideMenu("Offers", null, ev -> f3.show());
        f4.getToolbar().addCommandToLeftSideMenu("Candidacy", null, ev -> f33.show());
        f4.getToolbar().addCommandToLeftSideMenu("Foramtion", null, ev -> f4.show());
        f4.getToolbar().addCommandToLeftSideMenu("Favoris", null, ev -> f5.show());
        f4.getToolbar().addCommandToLeftSideMenu("Badges", null, ev -> f6.show());
        f4.getToolbar().addCommandToLeftSideMenu("Groups", null, ev -> f8.show());
        f4.getToolbar().addCommandToLeftSideMenu("Workspace", null, ev -> f10.show());
        f4.getToolbar().addCommandToLeftSideMenu("Profil", null, ev -> f11.show());
        f4.getToolbar().addCommandToLeftSideMenu("Logout", null, ev -> f1.show());

        // NAVIFATION FORM 5 
        f5.getToolbar().addCommandToLeftSideMenu("Home", null, ev -> f2.show());
        f5.getToolbar().addCommandToLeftSideMenu("Offers", null, ev -> f3.show());
        f5.getToolbar().addCommandToLeftSideMenu("Candidacy", null, ev -> f33.show());
        f5.getToolbar().addCommandToLeftSideMenu("Foramtion", null, ev -> f4.show());
        f5.getToolbar().addCommandToLeftSideMenu("Favoris", null, ev -> f5.show());
        f5.getToolbar().addCommandToLeftSideMenu("Badges", null, ev -> f6.show());
        f5.getToolbar().addCommandToLeftSideMenu("Groups", null, ev -> f8.show());
        f5.getToolbar().addCommandToLeftSideMenu("Workspace", null, ev -> f10.show());
        f5.getToolbar().addCommandToLeftSideMenu("Profil", null, ev -> f11.show());
        f5.getToolbar().addCommandToLeftSideMenu("Logout", null, ev -> f1.show());

        // NAVIGATION FORM 6  
        f6.getToolbar().addCommandToLeftSideMenu("Home", null, ev -> f2.show());
        f6.getToolbar().addCommandToLeftSideMenu("Offers", null, ev -> f3.show());
        f6.getToolbar().addCommandToLeftSideMenu("Candidacy", null, ev -> f33.show());
        f6.getToolbar().addCommandToLeftSideMenu("Foramtion", null, ev -> f4.show());
        f6.getToolbar().addCommandToLeftSideMenu("Favoris", null, ev -> f5.show());
        f6.getToolbar().addCommandToLeftSideMenu("Badges", null, ev -> f6.show());
        f6.getToolbar().addCommandToLeftSideMenu("Groups", null, ev -> f8.show());
        f6.getToolbar().addCommandToLeftSideMenu("Workspace", null, ev -> f10.show());
        f6.getToolbar().addCommandToLeftSideMenu("Profil", null, ev -> f11.show());
        f6.getToolbar().addCommandToLeftSideMenu("Logout", null, ev -> f1.show());

        // NAVIGATION FORM 8
        f8.getToolbar().addCommandToLeftSideMenu("Home", null, ev -> f2.show());
        f8.getToolbar().addCommandToLeftSideMenu("Offers", null, ev -> f3.show());
        f8.getToolbar().addCommandToLeftSideMenu("Candidacy", null, ev -> f33.show());
        f8.getToolbar().addCommandToLeftSideMenu("Foramtion", null, ev -> f4.show());
        f8.getToolbar().addCommandToLeftSideMenu("Favoris", null, ev -> f5.show());
        f8.getToolbar().addCommandToLeftSideMenu("Badges", null, ev -> f6.show());
        f8.getToolbar().addCommandToLeftSideMenu("Groups", null, ev -> f8.show());
        f8.getToolbar().addCommandToLeftSideMenu("Workspace", null, ev -> f10.show());
        f8.getToolbar().addCommandToLeftSideMenu("Profil", null, ev -> f11.show());
        f8.getToolbar().addCommandToLeftSideMenu("Logout", null, ev -> f1.show());

        // NAVIGATION FORM 10 
        f10.getToolbar().addCommandToLeftSideMenu("Home", null, ev -> f2.show());
        f10.getToolbar().addCommandToLeftSideMenu("Offers", null, ev -> f3.show());
        f10.getToolbar().addCommandToLeftSideMenu("Candidacy", null, ev -> f33.show());
        f10.getToolbar().addCommandToLeftSideMenu("Foramtion", null, ev -> f4.show());
        f10.getToolbar().addCommandToLeftSideMenu("Favoris", null, ev -> f5.show());
        f10.getToolbar().addCommandToLeftSideMenu("Badges", null, ev -> f6.show());
        f10.getToolbar().addCommandToLeftSideMenu("Groups", null, ev -> f8.show());
        f10.getToolbar().addCommandToLeftSideMenu("Workspace", null, ev -> f10.show());
        f10.getToolbar().addCommandToLeftSideMenu("Profil", null, ev -> f11.show());
        f10.getToolbar().addCommandToLeftSideMenu("Logout", null, ev -> f1.show());

        // NOVIGAATION FORM 11 
        f11.getToolbar().addCommandToLeftSideMenu("Home", null, ev -> f2.show());
        f11.getToolbar().addCommandToLeftSideMenu("Offers", null, ev -> f3.show());
        f11.getToolbar().addCommandToLeftSideMenu("Candidacy", null, ev -> f33.show());
        f11.getToolbar().addCommandToLeftSideMenu("Foramtion", null, ev -> f4.show());
        f11.getToolbar().addCommandToLeftSideMenu("Favoris", null, ev -> f5.show());
        f11.getToolbar().addCommandToLeftSideMenu("Badges", null, ev -> f6.show());
        f11.getToolbar().addCommandToLeftSideMenu("Groups", null, ev -> f8.show());
        f11.getToolbar().addCommandToLeftSideMenu("Workspace", null, ev -> f10.show());
        f11.getToolbar().addCommandToLeftSideMenu("Profil", null, ev -> f11.show());
        f11.getToolbar().addCommandToLeftSideMenu("Logout", null, ev -> f1.show());

        /*f1.getToolbar().addCommandToLeftBar("Back",null, (ActionListener) (ActionEvent evt) -> {
            home.showBack();
        });*/
        fsignup.getToolbar().addCommandToLeftBar("Back", null, (ActionListener) (ActionEvent evt) -> {
            f1.showBack();
        });

        signupbtn.addActionListener(er -> {
            System.out.println("sigdddnup");
            fsignup.show();
        });

        loginbtn.addActionListener(er -> {
            System.out.println(email.getText() + " " + password.getText());
            if (email.getText().equals("admin") && password.getText().equals("admin")) {

                // admin part get all users
                String url = "http://127.0.0.1:8000/user/getallusers";

                ConnectionRequest request = new ConnectionRequest() {
                    @Override
                    protected void readResponse(InputStream input) throws IOException {
                        JSONParser parser = new JSONParser();
                        Map<String, Object> response = parser.parseJSON(new InputStreamReader(input));
                        System.out.println("Response: " + response);
                        Object successValue = response.get("root");
                        System.out.println("Success value: " + successValue);
                        ArrayList<Object> usersJSON = new ArrayList<>();
                        ArrayList<Freelancer> users = new ArrayList<>();

                        usersJSON = new ArrayList<>((Collection<? extends Object>) successValue);
                        System.out.println(usersJSON.size());

                        for (int i = 0; i < usersJSON.size(); i++) {
                            Map<String, Object> jsonObject = (Map<String, Object>) usersJSON.get(i);
                            String fname = (String) jsonObject.get("fname");
                            Object idd = jsonObject.get("id");
                            double d = (double) idd;
                            int id = (int) d;

                            Object phonee = jsonObject.get("phone");
                            double ds = (double) phonee;
                            int phone = (int) ds;

                            users.add(new Freelancer(id, (String) jsonObject.get("lname"), (String) jsonObject.get("fname"), phone, (String) jsonObject.get("email"), (String) jsonObject.get("photo")));

                        }
                        
                        AdminUser.removeAll();
                        for (int i = 0; i < users.size(); i++) {

                            //Label lb = new Label(users.get(i).getEmail());
                            AdminUser.add(designOneUser(users.get(i), AdminUser));
                            AdminUser.refreshTheme();
                        }

                    }

                    @Override
                    protected void handleErrorResponseCode(int code, String message) {
                        System.out.println("Error: " + message);
                    }
                };
                request.setUrl(url);
                request.setPost(false);
                request.setContentType("application/json");
                NetworkManager.getInstance().addToQueue(request);

                AdminUser.show();
            } else {
                //Dialog.show("error", "Login ou PWD invalide", "ok", "Cancel");
                String url = "http://127.0.0.1:8000/user/signinmobile"; // replace with your API URL
                String requestBody = "{\"email\": \"" + email.getText() + "\" , \"password\": \"" + password.getText() + "\"}"; // replace with your login credentials as JSON
                System.out.println(requestBody);

                lb.setText("Welcome : " + email.getText());
                
                ConnectionRequest request = new ConnectionRequest() {
                    @Override
                    protected void readResponse(InputStream input) throws IOException {
                        JSONParser parser = new JSONParser();
                        Map<String, Object> response = parser.parseJSON(new InputStreamReader(input));
                        System.out.println("Response: " + response);
                        Object successValue = response.get("id");
                        System.out.println("Success value with id " + successValue);
                        
                        if(successValue != null)
                        {
                            Map<String, Object> jsonObject = (Map<String, Object>) response;
                            Object idd = jsonObject.get("id");
                            double d = (double) idd;
                            int id = (int) d;

                            Object phonee = jsonObject.get("phone");
                            double ds = (double) phonee;
                            int phone = (int) ds;
                            SessionManager session = SessionManager.getInstance();
                            Freelancer f = new Freelancer(id, (String) jsonObject.get("lname"), (String) jsonObject.get("fname"), phone, (String) jsonObject.get("email"), (String) jsonObject.get("photo"));
                            System.out.println(f);
                            session.setCurrentUser(f);
                            f2.show();
                        }
                        else 
                        {
                            Object errorValue = response.get("error");
                            Dialog.show("error", (String) errorValue, "ok", "Cancel");
                        }

                    }

                    @Override
                    protected void handleErrorResponseCode(int code, String message) {
                        System.out.println("Error: " + message);
                    }
                };
                request.setUrl(url);
                request.setPost(true);
                request.setRequestBody(requestBody);
                request.setContentType("application/json");
                NetworkManager.getInstance().addToQueue(request);
            }

        });

        //f3.getToolbar().addMaterialCommandToOverflowMenu("Exit", FontImage.MATERIAL_EXIT_TO_APP, TOP, ev->Display.getInstance().exitApplication());
        f1.show();

    }

    public Container designOneUser(Freelancer f, Form fr) {
        Container C2 = new Container(new BoxLayout(BoxLayout.X_AXIS));
        Label email = new Label(f.getEmail());
        Label name = new Label(f.getPrenom() + " " + f.getNom());
        Button show = new Button("Show");
        Button delete = new Button("Delete");

        delete.addActionListener(er -> {

            String url = "http://127.0.0.1:8000/user/deleteUser"; // replace with your API URL
            String requestBody = "{\"id\": " + f.getId() + " }"; // replace with your login credentials as JSON
            System.out.println(requestBody);


            ConnectionRequest request = new ConnectionRequest() {
                @Override
                protected void readResponse(InputStream input) throws IOException {
                    JSONParser parser = new JSONParser();
                    Map<String, Object> response = parser.parseJSON(new InputStreamReader(input));
                    System.out.println("Response: " + response);
                    Object successValue = response.get("succes");
                    System.out.println("Success value: " + successValue);

                }

                @Override
                protected void handleErrorResponseCode(int code, String message) {
                    System.out.println("Error: " + message);
                }
            };
            request.setUrl(url);
            request.setPost(true);
            request.setRequestBody(requestBody);
            request.setContentType("application/json");
            NetworkManager.getInstance().addToQueue(request);
            fr.refreshTheme();
        });

        show.addActionListener(er -> {
            Form f2 = new Form("Details", BoxLayout.y());
            Label nom = new Label("nom : " + f.getNom());
            Label prenom = new Label("prenom : " + f.getPrenom());
            Label xemail = new Label("Email : " + f.getEmail());
            Label role = new Label("Role : Freelancer ");

            f2.add(nom);
            f2.add(prenom);
            f2.add(xemail);
            f2.add(role);

            f2.getToolbar().addCommandToLeftBar("Back", null, ev -> fr.show());
            f2.show();
        });

        name.addPointerPressedListener((ActionListener) (ActionEvent evt) -> {
            Dialog.show("User", "Nom : " + f.getNom() + " \n Tel : " + f.getTel(), "Ok", null);
        });

        C2.add(email);
        C2.add(show);
        C2.add(delete);

        //C2.setLeadComponent(name);
        return C2;
    }

    public void stop() {
        current = getCurrentForm();
        if (current instanceof Dialog) {
            ((Dialog) current).dispose();
            current = getCurrentForm();
        }
    }

    public void destroy() {
    }

}
